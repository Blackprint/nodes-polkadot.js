## js-global
Blackprint.Sketch.registerDocs({"Polkadot.js":{Extrinsics:{Alliance:{AddUnscrupulousItems:{description:"Add accounts or websites to the list of unscrupulous items"},Announce:{description:"Make an announcement of a new IPFS CID about alliance issues"},Close:{description:"Close a vote that is either approved, disapproved, or whose voting period has ended"},ElevateAlly:{description:"Elevate an ally to fellow"},InitMembers:{description:"Initialize the founders, fellows, and allies"},JoinAlliance:{description:"Submit oneself for candidacy. A fixed deposit is reserved"},KickMember:{description:"Kick a member from the alliance and slash its deposit"},NominateAlly:{description:"A founder or fellow can nominate someone to join the alliance as an Ally. There is no deposit required to the nominator or nominee"},Propose:{description:"Add a new proposal to be voted on"},RemoveAnnouncement:{description:"Remove an announcement"},RemoveUnscrupulousItems:{description:"Deem an item no longer unscrupulous"},Retire:{description:"As a member, retire from the alliance and unreserve the deposit"},Set:{Rule:{description:"Set a new IPFS CID to the alliance rule"}},Veto:{description:"Veto a proposal about `set_rule` and `elevate_ally`, close, and remove it from the system, regardless of its current state"},Vote:{description:"Add an aye or nay vote for the sender to the given proposal"}},AllianceMotion:{Close:{description:"Close a vote that is either approved, disapproved or whose voting period has ended"},DisapproveProposal:{description:"Disapprove a proposal, close, and remove it from the system, regardless of its current state"},Execute:{description:"Dispatch a proposal from a member using the `Member` origin"},Propose:{description:"Add a new proposal to either be voted on or executed directly"},Set:{Members:{description:"Set the collective's membership"}},Vote:{description:"Add an aye or nay vote for the sender to the given proposal"}},Assets:{ApproveTransfer:{description:"Approve an amount of asset for transfer by a delegated third-party account"},Burn:{description:"Reduce the balance of `who` by as much as possible up to `amount` assets of `id`"},CancelApproval:{description:"Cancel all of some asset approved for delegated transfer by a third-party account"},ClearMetadata:{description:"Clear the metadata for an asset"},Create:{description:"Issue a new class of fungible assets from a public origin"},Destroy:{description:"Destroy a class of fungible assets"},ForceAssetStatus:{description:"Alter the attributes of a given asset"},ForceCancelApproval:{description:"Cancel all of some asset approved for delegated transfer by a third-party account"},ForceClearMetadata:{description:"Clear the metadata for an asset"},ForceCreate:{description:"Issue a new class of fungible assets from a privileged origin"},ForceSetMetadata:{description:"Force the metadata for an asset to some value"},ForceTransfer:{description:"Move some assets from one account to another"},Freeze:{description:"Disallow further unprivileged transfers from an account"},FreezeAsset:{description:"Disallow further unprivileged transfers for the asset class"},Mint:{description:"Mint assets of a particular class"},Refund:{description:"Return the deposit (if any) of an asset account"},Set:{Metadata:{description:"Set the metadata for an asset"},Team:{description:"Change the Issuer, Admin and Freezer of an asset"}},Thaw:{description:"Allow unprivileged transfers from an account again"},ThawAsset:{description:"Allow unprivileged transfers for the asset again"},Touch:{description:"Create an asset account for non-provider assets"},Transfer:{description:"Move some assets from the sender account to another"},TransferApproved:{description:"Transfer some asset balance from a previously delegated account to some third-party account"},TransferKeepAlive:{description:"Move some assets from the sender account to another, keeping the sender account alive"},TransferOwnership:{description:"Change the Owner of an asset"}},Authorship:{Set:{Uncles:{description:"Provide a set of uncles"}}},Babe:{PlanConfigChange:{description:"Plan an epoch config change. The epoch config change is recorded and will be enacted on the next call to `enact_epoch_change`. The config will be activated one epoch after. Multiple calls to this method will replace any existing planned config change that had not been enacted yet"},ReportEquivocation:{description:"Report authority equivocation/misbehavior. This method will verify the equivocation proof and validate the given key ownership proof against the extracted offender. If both are valid, the offence will be reported"},ReportEquivocationUnsigned:{description:"Report authority equivocation/misbehavior. This method will verify the equivocation proof and validate the given key ownership proof against the extracted offender. If both are valid, the offence will be reported. This extrinsic must be called unsigned and it is expected that only block authors will call it (validated in `ValidateUnsigned`), as such if the block author is defined it will be defined as the equivocation reporter"}},BagsList:{PutInFrontOf:{description:"Move the caller's Id directly in front of `lighter`"},Rebag:{description:"Declare that some `dislocated` account has, through rewards or penalties, sufficiently changed its score that it should properly fall into a different bag than its current one"}},Balances:{ForceTransfer:{description:"Exactly as `transfer`, except the origin must be root and the source account may be specified"},ForceUnreserve:{description:"Unreserve some balance from a user by force"},Set:{Balance:{description:"Set the balances of a given account"}},Transfer:{description:"Transfer some liquid free balance to another account"},TransferAll:{description:"Transfer the entire transferable balance from the caller account"},TransferKeepAlive:{description:"Same as the [`transfer`] call, but with a check that the transfer will not kill the origin account"}},Bounties:{AcceptCurator:{description:"Accept the curator role for a bounty. A deposit will be reserved from curator and refund upon successful payout"},ApproveBounty:{description:"Approve a bounty proposal. At a later time, the bounty will be funded and become active and the original deposit will be returned"},AwardBounty:{description:"Award bounty to a beneficiary account. The beneficiary will be able to claim the funds after a delay"},ClaimBounty:{description:"Claim the payout from an awarded bounty after payout delay"},CloseBounty:{description:"Cancel a proposed or active bounty. All the funds will be sent to treasury and the curator deposit will be unreserved if possible"},ExtendBountyExpiry:{description:"Extend the expiry time of an active bounty"},ProposeBounty:{description:"Propose a new bounty"},ProposeCurator:{description:"Assign a curator to a funded bounty"},UnassignCurator:{description:"Unassign curator from a bounty"}},ChildBounties:{AcceptCurator:{description:"Accept the curator role for the child-bounty"},AddChildBounty:{description:"Add a new child-bounty"},AwardChildBounty:{description:"Award child-bounty to a beneficiary"},ClaimChildBounty:{description:"Claim the payout from an awarded child-bounty after payout delay"},CloseChildBounty:{description:"Cancel a proposed or active child-bounty. Child-bounty account funds are transferred to parent bounty account. The child-bounty curator deposit may be unreserved if possible"},ProposeCurator:{description:"Propose curator for funded child-bounty"},UnassignCurator:{description:"Unassign curator from a child-bounty"}},Contracts:{Call:{description:"Makes a call to an account, optionally transferring some balance"},Instantiate:{description:"Instantiates a contract from a previously deployed wasm binary"},InstantiateWithCode:{description:"Instantiates a new contract from the supplied `code` optionally transferring some balance"},RemoveCode:{description:"Remove the code stored under `code_hash` and refund the deposit to its owner"},Set:{Code:{description:"Privileged function that changes the code of an existing contract"}},UploadCode:{description:"Upload new `code` without instantiating a contract from it"}},ConvictionVoting:{Delegate:{description:"Delegate the voting power (with some given conviction) of the sending account for a particular class of polls"},RemoveOtherVote:{description:"Remove a vote for a poll"},RemoveVote:{description:"Remove a vote for a poll"},Undelegate:{description:"Undelegate the voting power of the sending account for a particular class of polls"},Unlock:{description:"Remove the lock caused prior voting/delegating which has expired within a particluar class"},Vote:{description:"Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal; otherwise it is a vote to keep the status quo"}},Council:{Close:{description:"Close a vote that is either approved, disapproved or whose voting period has ended"},DisapproveProposal:{description:"Disapprove a proposal, close, and remove it from the system, regardless of its current state"},Execute:{description:"Dispatch a proposal from a member using the `Member` origin"},Propose:{description:"Add a new proposal to either be voted on or executed directly"},Set:{Members:{description:"Set the collective's membership"}},Vote:{description:"Add an aye or nay vote for the sender to the given proposal"}},Democracy:{Blacklist:{description:"Permanently place a proposal into the blacklist. This prevents it from ever being proposed again"},CancelProposal:{description:"Remove a proposal"},CancelQueued:{description:"Cancel a proposal queued for enactment"},CancelReferendum:{description:"Remove a referendum"},ClearPublicProposals:{description:"Clears all public proposals"},Delegate:{description:"Delegate the voting power (with some given conviction) of the sending account"},EmergencyCancel:{description:"Schedule an emergency cancellation of a referendum. Cannot happen twice to the same referendum"},EnactProposal:{description:"Enact a proposal from a referendum. For now we just make the weight be the maximum"},ExternalPropose:{description:"Schedule a referendum to be tabled once it is legal to schedule an external referendum"},ExternalProposeDefault:{description:"Schedule a negative-turnout-bias referendum to be tabled next once it is legal to schedule an external referendum"},ExternalProposeMajority:{description:"Schedule a majority-carries referendum to be tabled next once it is legal to schedule an external referendum"},FastTrack:{description:"Schedule the currently externally-proposed majority-carries referendum to be tabled immediately. If there is no externally-proposed referendum currently, or if there is one but it is not a majority-carries referendum then it fails"},NoteImminentPreimage:{description:"Register the preimage for an upcoming proposal. This requires the proposal to be in the dispatch queue. No deposit is needed. When this call is successful, i.e. the preimage has not been uploaded before and matches some imminent proposal, no fee is paid"},NoteImminentPreimageOperational:{description:"Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`"},NotePreimage:{description:"Register the preimage for an upcoming proposal. This doesn't require the proposal to be in the dispatch queue but does require a deposit, returned once enacted"},NotePreimageOperational:{description:"Same as `note_preimage` but origin is `OperationalPreimageOrigin`"},Propose:{description:"Propose a sensitive action to be taken"},ReapPreimage:{description:"Remove an expired proposal preimage and collect the deposit"},RemoveOtherVote:{description:"Remove a vote for a referendum"},RemoveVote:{description:"Remove a vote for a referendum"},Second:{description:"Signals agreement with a particular proposal"},Undelegate:{description:"Undelegate the voting power of the sending account"},Unlock:{description:"Unlock tokens that have an expired lock"},VetoExternal:{description:"Veto and blacklist the external proposal hash"},Vote:{description:"Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal; otherwise it is a vote to keep the status quo"}},ElectionProviderMultiPhase:{GovernanceFallback:{description:"Trigger the governance fallback"},Set:{EmergencyElectionResult:{description:"Set a solution in the queue, to be handed out to the client of this pallet in the next call to `ElectionProvider::elect`"},MinimumUntrustedScore:{description:"Set a new value for `MinimumUntrustedScore`"}},Submit:{description:"Submit a solution for the signed phase"},SubmitUnsigned:{description:"Submit a solution for the unsigned phase"}},Elections:{CleanDefunctVoters:{description:"Clean all voters who are defunct (i.e. they do not serve any purpose at all). The deposit of the removed voters are returned"},RemoveMember:{description:"Remove a particular member from the set. This is effective immediately and the bond of the outgoing member is slashed"},RemoveVoter:{description:"Remove `origin` as a voter"},RenounceCandidacy:{description:"Renounce one's intention to be a candidate for the next election round. 3 potential outcomes exist:"},SubmitCandidacy:{description:"Submit oneself for candidacy. A fixed amount of deposit is recorded"},Vote:{description:"Vote for a set of candidates for the upcoming round of election. This can be called to set the initial votes, or update already existing votes"}},Gilt:{PlaceBid:{description:"Place a bid for a gilt to be issued"},RetractBid:{description:"Retract a previously placed bid"},Set:{Target:{description:"Set target proportion of gilt-funds"}},Thaw:{description:"Remove an active but expired gilt. Reserved funds under gilt are freed and balance is adjusted to ensure that the funds grow or shrink to maintain the equivalent proportion of effective total issued funds"}},Grandpa:{NoteStalled:{description:"Note that the current authority set of the GRANDPA finality gadget has stalled"},ReportEquivocation:{description:"Report voter equivocation/misbehavior. This method will verify the equivocation proof and validate the given key ownership proof against the extracted offender. If both are valid, the offence will be reported"},ReportEquivocationUnsigned:{description:"Report voter equivocation/misbehavior. This method will verify the equivocation proof and validate the given key ownership proof against the extracted offender. If both are valid, the offence will be reported"}},Identity:{AddRegistrar:{description:"Add a registrar to the system"},AddSub:{description:"Add the given account to the sender's subs"},CancelRequest:{description:"Cancel a previous request"},ClearIdentity:{description:"Clear an account's identity info and all sub-accounts and return all deposits"},KillIdentity:{description:"Remove an account's identity and sub-account information and slash the deposits"},ProvideJudgement:{description:"Provide a judgement for an account's identity"},QuitSub:{description:"Remove the sender as a sub-account"},RemoveSub:{description:"Remove the given account from the sender's subs"},RenameSub:{description:"Alter the associated name of the given sub-account"},RequestJudgement:{description:"Request a judgement from a registrar"},Set:{AccountId:{description:"Change the account associated with a registrar"},Fee:{description:"Set the fee required for a judgement to be requested from a registrar"},Fields:{description:"Set the field information for a registrar"},Identity:{description:"Set an account's identity information and reserve the appropriate deposit"},Subs:{description:"Set the sub-accounts of the sender"}}},ImOnline:{Heartbeat:{description:""}},Indices:{Claim:{description:"Assign an previously unassigned index"},ForceTransfer:{description:"Force an index to an account. This doesn't require a deposit. If the index is already held, then any deposit is reimbursed to its current owner"},Free:{description:"Free up an index owned by the sender"},Freeze:{description:"Freeze an index so it will always point to the sender account. This consumes the deposit"},Transfer:{description:"Assign an index already owned by the sender to another account. The balance reservation is effectively transferred to the new account"}},Lottery:{BuyTicket:{description:"Buy a ticket to enter the lottery"},Set:{Calls:{description:"Set calls in storage which can be used to purchase a lottery ticket"}},StartLottery:{description:"Start a lottery using the provided configuration"},StopRepeat:{description:"If a lottery is repeating, you can use this to stop the repeat. The lottery will continue to run to completion"}},Multisig:{ApproveAsMulti:{description:"Register approval for a dispatch to be made from a deterministic composite account if approved by a total of `threshold - 1` of `other_signatories`"},AsMulti:{description:"Register approval for a dispatch to be made from a deterministic composite account if approved by a total of `threshold - 1` of `other_signatories`"},AsMultiThreshold1:{description:"Immediately dispatch a multi-signature call using a single approval from the caller"},CancelAsMulti:{description:"Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously for this operation will be unreserved on success"}},NominationPools:{BondExtra:{description:"Bond `extra` more funds from `origin` into the pool to which they already belong"},Chill:{description:"Chill on behalf of the pool"},ClaimPayout:{description:"A bonded member can use this to claim their payout based on the rewards that the pool has accumulated since their last claimed payout (OR since joining if this is there first time claiming rewards). The payout will be transferred to the member's account"},Create:{description:"Create a new delegation pool"},Join:{description:"Stake funds with a pool. The amount to bond is transferred from the member to the pools account and immediately increases the pools bond"},Nominate:{description:"Nominate on behalf of the pool"},PoolWithdrawUnbonded:{description:"Call `withdraw_unbonded` for the pools account. This call can be made by any account"},Set:{Configs:{description:"Update configurations for the nomination pools. The origin for this call must be Root"},Metadata:{description:"Set a new metadata for the pool"},State:{description:"Set a new state for the pool"}},Unbond:{description:"Unbond up to `unbonding_points` of the `member_account`'s funds from the pool. It implicitly collects the rewards one last time, since not doing so would mean some rewards would be forfeited"},UpdateRoles:{description:"Update the roles of the pool"},WithdrawUnbonded:{description:"Withdraw unbonded funds from `member_account`. If no bonded funds can be unbonded, an error is returned"}},Preimage:{NotePreimage:{description:"Register a preimage on-chain"},RequestPreimage:{description:"Request a preimage be uploaded to the chain without paying any fees or deposits"},UnnotePreimage:{description:"Clear an unrequested preimage from the runtime storage"},UnrequestPreimage:{description:"Clear a previously made request for a preimage"}},Proxy:{AddProxy:{description:"Register a proxy account for the sender that is able to make calls on its behalf"},Announce:{description:"Publish the hash of a proxy-call that will be made in the future"},Anonymous:{description:"Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and initialize it with a proxy of `proxy_type` for `origin` sender"},KillAnonymous:{description:"Removes a previously spawned anonymous proxy"},Proxy:{description:"Dispatch the given `call` from an account that the sender is authorised for through `add_proxy`"},ProxyAnnounced:{description:"Dispatch the given `call` from an account that the sender is authorized for through `add_proxy`"},RejectAnnouncement:{description:"Remove the given announcement of a delegate"},RemoveAnnouncement:{description:"Remove a given announcement"},RemoveProxies:{description:"Unregister all proxy accounts for the sender"},RemoveProxy:{description:"Unregister a proxy account for the sender"}},RankedCollective:{AddMember:{description:"Introduce a new member"},CleanupPoll:{description:"Remove votes from the given poll. It must have ended"},DemoteMember:{description:"Decrement the rank of an existing member by one. If the member is already at rank zero, then they are removed entirely"},PromoteMember:{description:"Increment the rank of an existing member by one"},RemoveMember:{description:"Remove the member entirely"},Vote:{description:"Add an aye or nay vote for the sender to the given proposal"}},RankedPolls:{Cancel:{description:"Cancel an ongoing referendum"},Kill:{description:"Cancel an ongoing referendum and slash the deposits"},NudgeReferendum:{description:"Advance a referendum onto its next logical state. Only used internally"},OneFewerDeciding:{description:"Advance a track onto its next logical state. Only used internally"},PlaceDecisionDeposit:{description:"Post the Decision Deposit for a referendum"},RefundDecisionDeposit:{description:"Refund the Decision Deposit for a closed referendum back to the depositor"},Submit:{description:"Propose a referendum on a privileged action"}},Recovery:{AsRecovered:{description:"Send a call through a recovered account"},CancelRecovered:{description:"Cancel the ability to use `as_recovered` for `account`"},ClaimRecovery:{description:"Allow a successful rescuer to claim their recovered account"},CloseRecovery:{description:"As the controller of a recoverable account, close an active recovery process for your account"},CreateRecovery:{description:"Create a recovery configuration for your account. This makes your account recoverable"},InitiateRecovery:{description:"Initiate the process for recovering a recoverable account"},RemoveRecovery:{description:"Remove the recovery process for your account. Recovered accounts are still accessible"},Set:{Recovered:{description:"Allow ROOT to bypass the recovery process and set an a rescuer account for a lost account directly"}},VouchRecovery:{description:"Allow a \"friend\" of a recoverable account to vouch for an active recovery process for that account"}},Referenda:{Cancel:{description:"Cancel an ongoing referendum"},Kill:{description:"Cancel an ongoing referendum and slash the deposits"},NudgeReferendum:{description:"Advance a referendum onto its next logical state. Only used internally"},OneFewerDeciding:{description:"Advance a track onto its next logical state. Only used internally"},PlaceDecisionDeposit:{description:"Post the Decision Deposit for a referendum"},RefundDecisionDeposit:{description:"Refund the Decision Deposit for a closed referendum back to the depositor"},Submit:{description:"Propose a referendum on a privileged action"}},Remark:{Store:{description:"Index and store data off chain"}},Scheduler:{Cancel:{description:"Cancel an anonymously scheduled task"},CancelNamed:{description:"Cancel a named scheduled task"},Schedule:{description:"Anonymously schedule a task"},ScheduleAfter:{description:"Anonymously schedule a task after a delay"},ScheduleNamed:{description:"Schedule a named task"},ScheduleNamedAfter:{description:"Schedule a named task after a delay"}},Session:{PurgeKeys:{description:"Removes any session key(s) of the function caller"},Set:{Keys:{description:"Sets the session key(s) of the function caller to `keys`. Allows an account to set its session key prior to becoming a validator. This doesn't take effect until the next session"}}},Society:{Bid:{description:"A user outside of the society can make a bid for entry"},DefenderVote:{description:"As a member, vote on the defender"},Found:{description:"Found the society"},JudgeSuspendedCandidate:{description:"Allow suspended judgement origin to make judgement on a suspended candidate"},JudgeSuspendedMember:{description:"Allow suspension judgement origin to make judgement on a suspended member"},Payout:{description:"Transfer the first matured payout for the sender and remove it from the records"},Set:{MaxMembers:{description:"Allows root origin to change the maximum number of members in society. Max membership count must be greater than 1"}},Unbid:{description:"A bidder can remove their bid for entry into society. By doing so, they will have their candidate deposit returned or they will unvouch their voucher"},Unfound:{description:"Annul the founding of the society"},Unvouch:{description:"As a vouching member, unvouch a bid. This only works while vouched user is only a bidder (and not a candidate)"},Vote:{description:"As a member, vote on a candidate"},Vouch:{description:"As a member, vouch for someone to join society by placing a bid on their behalf"}},Staking:{Bond:{description:"Take the origin account as a stash and lock up `value` of its balance. `controller` will be the account that controls it"},BondExtra:{description:"Add some extra amount that have appeared in the stash `free_balance` into the balance up for staking"},CancelDeferredSlash:{description:"Cancel enactment of a deferred slash"},Chill:{description:"Declare no desire to either validate or nominate"},ChillOther:{description:"Declare a `controller` to stop participating as either a validator or nominator"},ForceApplyMinCommission:{description:"Force a validator to have at least the minimum commission. This will not affect a validator who already has a commission greater than or equal to the minimum. Any account can call this"},ForceNewEra:{description:"Force there to be a new era at the end of the next session. After this, it will be reset to normal (non-forced) behaviour"},ForceNewEraAlways:{description:"Force there to be a new era at the end of sessions indefinitely"},ForceNoEras:{description:"Force there to be no new eras indefinitely"},ForceUnstake:{description:"Force a current staker to become completely unstaked, immediately"},IncreaseValidatorCount:{description:"Increments the ideal number of validators"},Kick:{description:"Remove the given nominations from the calling validator"},Nominate:{description:"Declare the desire to nominate `targets` for the origin controller"},PayoutStakers:{description:"Pay out all the stakers behind a single validator for a single era"},ReapStash:{description:"Remove all data structures concerning a staker/stash once it is at a state where it can be considered `dust` in the staking system. The requirements are:"},Rebond:{description:"Rebond a portion of the stash scheduled to be unlocked"},ScaleValidatorCount:{description:"Scale up the ideal number of validators by a factor"},Set:{Controller:{description:"(Re-)set the controller of a stash"},HistoryDepth:{description:"Set `HistoryDepth` value. This function will delete any history information when `HistoryDepth` is reduced"},Invulnerables:{description:"Set the validators who cannot be slashed (if any)"},Payee:{description:"(Re-)set the payment target for a controller"},StakingConfigs:{description:"Update the various staking configurations "},ValidatorCount:{description:"Sets the ideal number of validators"}},Unbond:{description:"Schedule a portion of the stash to be unlocked ready for transfer out after the bond period ends. If this leaves an amount actively bonded less than T::Currency::minimum_balance(), then it is increased to the full amount"},Validate:{description:"Declare the desire to validate for the origin controller"},WithdrawUnbonded:{description:"Remove any unlocked chunks from the `unlocking` queue from our management"}},StateTrieMigration:{ContinueMigrate:{description:"Continue the migration for the given `limits`"},ControlAutoMigration:{description:"Control the automatic migration"},ForceSetProgress:{description:"Forcefully set the progress the running migration"},MigrateCustomChild:{description:"Migrate the list of child keys by iterating each of them one by one"},MigrateCustomTop:{description:"Migrate the list of top keys by iterating each of them one by one"},Set:{SignedMaxLimits:{description:"Set the maximum limit of the signed migration"}}},Sudo:{Set:{Key:{description:"Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo key"}},Sudo:{description:"Authenticates the sudo key and dispatches a function call with `Root` origin"},SudoAs:{description:"Authenticates the sudo key and dispatches a function call with `Signed` origin from a given account"},SudoUncheckedWeight:{description:"Authenticates the sudo key and dispatches a function call with `Root` origin. This function does not check the weight of the call, and instead allows the Sudo user to specify the weight of the call"}},System:{FillBlock:{description:"A dispatch that will fill the block weight up to the given ratio"},KillPrefix:{description:"Kill all storage items with a key that starts with the given prefix"},KillStorage:{description:"Kill some items from storage"},Remark:{description:"Make some on-chain remark"},RemarkWithEvent:{description:"Make some on-chain remark and emit event"},Set:{Code:{description:"Set the new runtime code"},CodeWithoutChecks:{description:"Set the new runtime code without doing any checks of the given `code`"},HeapPages:{description:"Set the number of pages in the WebAssembly environment's heap"},Storage:{description:"Set some items of storage"}}},TechnicalCommittee:{Close:{description:"Close a vote that is either approved, disapproved or whose voting period has ended"},DisapproveProposal:{description:"Disapprove a proposal, close, and remove it from the system, regardless of its current state"},Execute:{description:"Dispatch a proposal from a member using the `Member` origin"},Propose:{description:"Add a new proposal to either be voted on or executed directly"},Set:{Members:{description:"Set the collective's membership"}},Vote:{description:"Add an aye or nay vote for the sender to the given proposal"}},TechnicalMembership:{AddMember:{description:"Add a member `who` to the set"},ChangeKey:{description:"Swap out the sending member for some other key `new`"},ClearPrime:{description:"Remove the prime member if it exists"},RemoveMember:{description:"Remove a member `who` from the set"},ResetMembers:{description:"Change the membership to a new set, disregarding the existing membership. Be nice and pass `members` pre-sorted"},Set:{Prime:{description:"Set the prime member. Must be a current member"}},SwapMember:{description:"Swap out one member `remove` for another `add`"}},Timestamp:{Set:{description:"Set the current time"}},Tips:{CloseTip:{description:"Close and payout a tip"},ReportAwesome:{description:"Report something `reason` that deserves a tip and claim any eventual the finder's fee"},RetractTip:{description:"Retract a prior tip-report from `report_awesome`, and cancel the process of tipping"},SlashTip:{description:"Remove and slash an already-open tip"},Tip:{description:"Declare a tip value for an already-open tip"},TipNew:{description:"Give a tip for something new; no finder's fee will be taken"}},TransactionStorage:{CheckProof:{description:"Check storage proof for block number `block_number() - StoragePeriod`. If such block does not exist the proof is expected to be `None`"},Renew:{description:"Renew previously stored data. Parameters are the block number that contains previous `store` or `renew` call and transaction index within that block. Transaction index is emitted in the `Stored` or `Renewed` event. Applies same fees as `store`"},Store:{description:"Index and store data off chain. Minimum data size is 1 bytes, maximum is `MaxTransactionSize`. Data will be removed after `STORAGE_PERIOD` blocks, unless `renew` is called. #"}},Treasury:{ApproveProposal:{description:"Approve a proposal. At a later time, the proposal will be allocated to the beneficiary and the original deposit will be returned"},ProposeSpend:{description:"Put forward a suggestion for spending. A deposit proportional to the value is reserved and slashed if the proposal is rejected. It is returned once the proposal is awarded"},RejectProposal:{description:"Reject a proposed spend. The original deposit will be slashed"},RemoveApproval:{description:"Force a previously approved proposal to be removed from the approval queue. The original deposit will no longer be returned"},Spend:{description:"Propose and approve a spend of treasury funds"}},Uniques:{ApproveTransfer:{description:"Approve an item to be transferred by a delegated third-party account"},Burn:{description:"Destroy a single item"},BuyItem:{description:"Allows to buy an item if it's up for sale"},CancelApproval:{description:"Cancel the prior approval for the transfer of an item by a delegate"},ClearAttribute:{description:"Clear an attribute for a collection or item"},ClearCollectionMetadata:{description:"Clear the metadata for a collection"},ClearMetadata:{description:"Clear the metadata for an item"},Create:{description:"Issue a new collection of non-fungible items from a public origin"},Destroy:{description:"Destroy a collection of fungible items"},ForceCreate:{description:"Issue a new collection of non-fungible items from a privileged origin"},ForceItemStatus:{description:"Alter the attributes of a given item"},Freeze:{description:"Disallow further unprivileged transfer of an item"},FreezeCollection:{description:"Disallow further unprivileged transfers for a whole collection"},Mint:{description:"Mint an item of a particular collection"},Redeposit:{description:"Reevaluate the deposits on some items"},Set:{AcceptOwnership:{description:"Set (or reset) the acceptance of ownership for a particular account"},Attribute:{description:"Set an attribute for a collection or item"},CollectionMaxSupply:{description:"Set the maximum amount of items a collection could have"},CollectionMetadata:{description:"Set the metadata for a collection"},Metadata:{description:"Set the metadata for an item"},Price:{description:"Set (or reset) the price for an item"},Team:{description:"Change the Issuer, Admin and Freezer of a collection"}},Thaw:{description:"Re-allow unprivileged transfer of an item"},ThawCollection:{description:"Re-allow unprivileged transfers for a whole collection"},Transfer:{description:"Move an item from the sender account to another"},TransferOwnership:{description:"Change the Owner of a collection"},TryIncrementId:{description:"Increments the `CollectionId` stored in `NextCollectionId`"}},Utility:{AsDerivative:{description:"Send a call through an indexed pseudonym of the sender"},Batch:{description:"Send a batch of dispatch calls"},BatchAll:{description:"Send a batch of dispatch calls and atomically execute them. The whole transaction will rollback and fail if any of the calls failed"},DispatchAs:{description:"Dispatches a function call with a provided origin"},ForceBatch:{description:"Send a batch of dispatch calls. Unlike `batch`, it allows errors and won't interrupt"}},Vesting:{ForceVestedTransfer:{description:"Force a vested transfer"},MergeSchedules:{description:"Merge two vesting schedules together, creating a new vesting schedule that unlocks over the highest possible start and end blocks. If both schedules have already started the current block will be used as the schedule start; with the caveat that if one schedule is finished by the current block, the other will be treated as the new merged schedule, unmodified"},Vest:{description:"Unlock any vested funds of the sender account"},VestOther:{description:"Unlock any vested funds of a `target` account"},VestedTransfer:{description:"Create a vested transfer"}}}}});