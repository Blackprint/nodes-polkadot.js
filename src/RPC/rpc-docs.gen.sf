## js-global
Blackprint.Sketch.registerDocs({"Polkadot.js":{RPC:{Author:{Has:{Key:{description:"Returns true if the keystore has private keys for the given public key and key type"},SessionKeys:{description:"Returns true if the keystore has private keys for the given session public keys"}},InsertKey:{description:"Insert a key into the keystore"},PendingExtrinsics:{description:"Returns all pending extrinsics, potentially grouped by sender"},RemoveExtrinsic:{description:"Remove given extrinsic from the pool and temporarily ban it to prevent reimporting"},RotateKeys:{description:"Generate new session keys and returns the corresponding public keys"},SubmitAndWatchExtrinsic:{description:"Submit and subscribe to watch an extrinsic until unsubscribed"},SubmitExtrinsic:{description:"Submit a fully formatted extrinsic for block inclusion"}},Babe:{EpochAuthorship:{description:"Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore"}},Beefy:{Get:{FinalizedHead:{description:"Returns hash of the latest BEEFY finalized block as seen by this client"}},SubscribeJustifications:{description:"Returns the block most recently finalized by BEEFY, alongside side its justification"}},Chain:{Get:{Block:{description:"Get header and body of a relay chain block"},BlockHash:{description:"Get the block hash for a specific block"},FinalizedHead:{description:"Get hash of the last finalized block in the canon chain"},Header:{description:"Retrieves the header for a specific block"}},SubscribeAllHeads:{description:"Retrieves the newest header via subscription"},SubscribeFinalizedHeads:{description:"Retrieves the best finalized header via subscription"},SubscribeNewHeads:{description:"Retrieves the best header via subscription"}},ChildState:{Get:{Keys:{description:"Returns the keys with prefix from a child storage, leave empty to get all the keys"},KeysPaged:{description:"Returns the keys with prefix from a child storage with pagination support"},Storage:{description:"Returns a child storage entry at a specific block state"},StorageEntries:{description:"Returns child storage entries for multiple keys at a specific block state"},StorageHash:{description:"Returns the hash of a child storage entry at a block state"},StorageSize:{description:"Returns the size of a child storage entry at a block state"}}},Contracts:{Call:{description:"Executes a call to a contract"},Get:{Storage:{description:"Returns the value under a specified storage key in a contract"}},Instantiate:{description:"Instantiate a new contract"},RentProjection:{description:"Returns the projected time a given contract will be able to sustain paying its rent"},UploadCode:{description:"Upload new code without instantiating a contract from it"}},Dev:{Get:{BlockStats:{description:"Reexecute the specified `block_hash` and gather statistics while doing so"}}},Engine:{CreateBlock:{description:"Instructs the manual-seal authorship task to create a new block"},FinalizeBlock:{description:"Instructs the manual-seal authorship task to finalize a block"}},Eth:{Accounts:{description:"Returns accounts list"},BlockNumber:{description:"Returns the blockNumber"},Call:{description:"Call contract, returning the output data"},ChainId:{description:"Returns the chain ID used for transaction signing at the current best block. None is returned if not available"},Coinbase:{description:"Returns block author"},EstimateGas:{description:"Estimate gas needed for execution of given contract"},FeeHistory:{description:"Returns fee history for given block count & reward percentiles"},GasPrice:{description:"Returns current gas price"},Get:{Balance:{description:"Returns balance of the given account"},BlockBy:{Hash:{description:"Returns block with given hash"},Number:{description:"Returns block with given number"}},BlockTransactionCountBy:{Hash:{description:"Returns the number of transactions in a block with given hash"},Number:{description:"Returns the number of transactions in a block with given block number"}},Code:{description:"Returns the code at given address at given time (block number)"},FilterChanges:{description:"Returns filter changes since last poll"},FilterLogs:{description:"Returns all logs matching given filter (in a range 'from' - 'to')"},Logs:{description:"Returns logs matching given filter object"},Proof:{description:"Returns proof for account and storage"},StorageAt:{description:"Returns content of the storage at given address"},TransactionBy:{BlockHashAndIndex:{description:"Returns transaction at given block hash and index"},BlockNumberAndIndex:{description:"Returns transaction by given block number and index"},Hash:{description:"Get transaction by its hash"}},TransactionCount:{description:"Returns the number of transactions sent from given address at given time (block number)"},TransactionReceipt:{description:"Returns transaction receipt by transaction hash"},UncleBy:{BlockHashAndIndex:{description:"Returns an uncles at given block and index"},BlockNumberAndIndex:{description:"Returns an uncles at given block and index"}},UncleCountBy:{BlockHash:{description:"Returns the number of uncles in a block with given hash"},BlockNumber:{description:"Returns the number of uncles in a block with given block number"}},Work:{description:"Returns the hash of the current block, the seedHash, and the boundary condition to be met"}},Hashrate:{description:"Returns the number of hashes per second that the node is mining with"},MaxPriorityFeePerGas:{description:"Returns max priority fee per gas"},Mining:{description:"Returns true if client is actively mining new blocks"},New:{BlockFilter:{description:"Returns id of new block filter"},Filter:{description:"Returns id of new filter"},PendingTransactionFilter:{description:"Returns id of new block filter"}},ProtocolVersion:{description:"Returns protocol version encoded as a string (quotes are necessary)"},SendRawTransaction:{description:"Sends signed transaction, returning its hash"},SendTransaction:{description:"Sends transaction; will block waiting for signer to return the transaction hash"},SubmitHashrate:{description:"Used for submitting mining hashrate"},SubmitWork:{description:"Used for submitting a proof-of-work solution"},Subscribe:{description:"Subscribe to Eth subscription"},Syncing:{description:"Returns an object with data about the sync status or false"},UninstallFilter:{description:"Uninstalls filter"}},Net:{Listening:{description:"Returns true if client is actively listening for network connections. Otherwise false"},PeerCount:{description:"Returns number of peers connected to node"},Version:{description:"Returns protocol version"}},Web3:{ClientVersion:{description:"Returns current client version"},Sha3:{description:"Returns sha3 of the given data"}},Grandpa:{ProveFinality:{description:"Prove finality for the given block number, returning the Justification for the last block in the set"},RoundState:{description:"Returns the state of the current best round state as well as the ongoing background rounds"},SubscribeJustifications:{description:"Subscribes to grandpa justifications"}},Mmr:{GenerateBatchProof:{description:"Generate MMR proof for the given leaf indices"},GenerateProof:{description:"Generate MMR proof for given leaf index"}},OffChain:{LocalStorageGet:{description:"Get offchain local storage under given key and prefix"},LocalStorageSet:{description:"Set offchain local storage under given key and prefix"}},Payment:{QueryFeeDetails:{description:"Query the detailed fee of a given encoded extrinsic"},QueryInfo:{description:"Retrieves the fee information for an encoded extrinsic"}},Rpc:{Methods:{description:"Retrieves the list of RPC methods that are exposed by the node"}},State:{Call:{description:"Perform a call to a builtin on the chain"},Get:{ChildKeys:{description:"Retrieves the keys with prefix of a specific child storage"},ChildReadProof:{description:"Returns proof of storage for child key entries at a specific block state"},ChildStorage:{description:"Retrieves the child storage for a key"},ChildStorageHash:{description:"Retrieves the child storage hash"},ChildStorageSize:{description:"Retrieves the child storage size"},Keys:{description:"Retrieves the keys with a certain prefix"},KeysPaged:{description:"Returns the keys with prefix with pagination support"},Metadata:{description:"Returns the runtime metadata"},Pairs:{description:"Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)"},ReadProof:{description:"Returns proof of storage entries at a specific block state"},RuntimeVersion:{description:"Get the runtime version"},Storage:{description:"Retrieves the storage for a key"},StorageHash:{description:"Retrieves the storage hash"},StorageSize:{description:"Retrieves the storage size"}},QueryStorage:{description:"Query historical storage entries (by key) starting from a start block"},QueryStorageAt:{description:"Query storage entries (by key) starting at block hash given as the second parameter"},SubscribeRuntimeVersion:{description:"Retrieves the runtime version via subscription"},SubscribeStorage:{description:"Subscribes to storage changes for the provided keys"},TraceBlock:{description:"Provides a way to trace the re-execution of a single block"},TrieMigrationStatus:{description:"Check current migration state"}},SyncState:{GenSyncSpec:{description:"Returns the json-serialized chainspec running the node, with a sync state"}},System:{AccountNextIndex:{description:"Retrieves the next accountIndex as available on the node"},AddLogFilter:{description:"Adds the supplied directives to the current log filter"},AddReservedPeer:{description:"Adds a reserved peer"},Chain:{description:"Retrieves the chain"},ChainType:{description:"Retrieves the chain type"},DryRun:{description:"Dry run an extrinsic at a given block"},Health:{description:"Return health status of the node"},LocalListenAddresses:{description:"The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example"},LocalPeerId:{description:"Returns the base58-encoded PeerId of the node"},Name:{description:"Retrieves the node name"},NetworkState:{description:"Returns current state of the network"},NodeRoles:{description:"Returns the roles the node is running as"},Peers:{description:"Returns the currently connected peers"},Properties:{description:"Get a custom set of properties as a JSON object, defined in the chain spec"},RemoveReservedPeer:{description:"Remove a reserved peer"},ReservedPeers:{description:"Returns the list of reserved peers"},ResetLogFilter:{description:"Resets the log filter to Substrate defaults"},SyncState:{description:"Returns the state of the syncing of the node"},Version:{description:"Retrieves the version of the node"}}}}});