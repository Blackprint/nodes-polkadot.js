## js-global
Blackprint.Sketch.registerDocs({"Polkadot.js":{Storage:{Alliance:{Announcements:{description:"The current IPFS CIDs of any announcements"},DepositOf:{description:"Maps members to their candidacy deposit"},Members:{description:"Maps member type to members of each type"},Rule:{description:"The IPFS CID of the alliance rule. Founders and fellows can propose a new rule with a super-majority"},UnscrupulousAccounts:{description:"The current list of accounts deemed unscrupulous. These accounts non grata cannot submit candidacy"},UnscrupulousWebsites:{description:"The current list of websites deemed unscrupulous"},UpForKicking:{description:"A set of members that are (potentially) being kicked out. They cannot retire until the motion is settled"}},AllianceMotion:{Members:{description:"The current members of the collective. This is stored sorted (just by value)"},Prime:{description:"The prime member that helps determine the default vote behavior in case of absentations"},ProposalCount:{description:"Proposals so far"},ProposalOf:{description:"Actual proposal for a given hash, if it's current"},Proposals:{description:"The hashes of the active proposals"},Voting:{description:"Votes on a given proposal, if it is ongoing"}},Assets:{Account:{description:"The holdings of a specific account for a specific asset"},Approvals:{description:"Approved balance transfers. First balance is the amount approved for transfer. Second is the amount of `T::Currency` reserved for storing this. First key is the asset ID, second key is the owner and third key is the delegate"},Asset:{description:"Details of an asset"},Metadata:{description:"Metadata of an asset"}},AuthorityDiscovery:{Keys:{description:"Keys of the current authority set"},NextKeys:{description:"Keys of the next authority set"}},Authorship:{Author:{description:"Author of current block"},DidSetUncles:{description:"Whether uncles were already set in this block"},Uncles:{description:"Uncles"}},Babe:{Authorities:{description:"Current epoch authorities"},AuthorVrfRandomness:{description:"This field should always be populated during block processing unless secondary plain slots are enabled (which don't contain a VRF output)"},CurrentSlot:{description:"Current slot number"},EpochConfig:{description:"The configuration for the current epoch. Should never be `None` as it is initialized in genesis"},EpochIndex:{description:"Current epoch index"},EpochStart:{description:"The block numbers when the last and current epoch have started, respectively `N-1` and `N`. NOTE: We track this is in order to annotate the block number when a given pool of entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in slots, which may be skipped, the block numbers may not line up with the slot numbers"},GenesisSlot:{description:"The slot at which the first epoch actually started. This is 0 until the first block of the chain"},Initialized:{description:"Temporary value (cleared at block finalization) which is `Some` if per-block initialization has already been called for current block"},Lateness:{description:"How late the current block is compared to its parent"},NextAuthorities:{description:"Next epoch authorities"},NextEpochConfig:{description:"The configuration for the next epoch, `None` if the config will not change (you can fallback to `EpochConfig` instead in that case)"},NextRandomness:{description:"Next epoch randomness"},PendingEpochConfigChange:{description:"Pending epoch configuration change that will be applied when the next epoch is enacted"},Randomness:{description:"The epoch randomness for the *current* epoch"},SegmentIndex:{description:"Randomness under construction"},UnderConstruction:{description:"TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay"}},BagsList:{CounterForListNodes:{description:"Counter for the related counted storage map"},ListBags:{description:"A bag stored in storage"},ListNodes:{description:"A single node, within some bag"}},Balances:{Account:{description:"The Balances pallet example of storing the balance of an account"},Locks:{description:"Any liquidity locks on some account balances. NOTE: Should only be accessed when setting, changing and freeing a lock"},Reserves:{description:"Named reserves on some account balances"},StorageVersion:{description:"Storage version of the pallet"},TotalIssuance:{description:"The total units issued in the system"}},Bounties:{Bounties:{description:"Bounties that have been made"},BountyApprovals:{description:"Bounty indices that have been approved but not yet funded"},BountyCount:{description:"Number of bounty proposals that have been made"},BountyDescriptions:{description:"The description of each bounty"}},ChildBounties:{ChildBounties:{description:"Child bounties that have been added"},ChildBountyCount:{description:"Number of total child bounties"},ChildBountyDescriptions:{description:"The description of each child-bounty"},ChildrenCuratorFees:{description:"The cumulative child-bounty curator fee for each parent bounty"},ParentChildBounties:{description:"Number of child bounties per parent bounty. Map of parent bounty index to number of child bounties"}},Contracts:{CodeStorage:{description:"A mapping between an original code hash and instrumented wasm code, ready for execution"},ContractInfoOf:{description:"The code associated with a given account"},DeletionQueue:{description:"Evicted contracts that await child trie deletion"},Nonce:{description:"This is a **monotonic** counter incremented on contract instantiation"},OwnerInfoOf:{description:"A mapping between an original code hash and its owner information"},PristineCode:{description:"A mapping from an original code hash to the original code, untouched by instrumentation"}},ConvictionVoting:{ClassLocksFor:{description:"The voting classes which have a non-zero lock requirement and the lock amounts which they require. The actual amount locked on behalf of this pallet should always be the maximum of this list"},VotingFor:{description:"All voting for a particular voter in a particular voting class. We store the balance for the number of votes that we have recorded"}},Council:{Members:{description:"The current members of the collective. This is stored sorted (just by value)"},Prime:{description:"The prime member that helps determine the default vote behavior in case of absentations"},ProposalCount:{description:"Proposals so far"},ProposalOf:{description:"Actual proposal for a given hash, if it's current"},Proposals:{description:"The hashes of the active proposals"},Voting:{description:"Votes on a given proposal, if it is ongoing"}},Democracy:{Blacklist:{description:"A record of who vetoed what. Maps proposal hash to a possible existent block number (until when it may not be resubmitted) and who vetoed it"},Cancellations:{description:"Record of all proposals that have been subject to emergency cancellation"},DepositOf:{description:"Those who have locked a deposit"},LastTabledWasExternal:{description:"True if the last referendum tabled was submitted externally. False if it was a public proposal"},LowestUnbaked:{description:"The lowest referendum index representing an unbaked referendum. Equal to `ReferendumCount` if there isn't a unbaked referendum"},NextExternal:{description:"The referendum to be tabled whenever it would be valid to table an external proposal. This happens when a referendum needs to be tabled and one of two conditions are met:"},Preimages:{description:"Map of hashes to the proposal preimage, along with who registered it and their deposit. The block number is the block at which it was deposited"},PublicPropCount:{description:"The number of (public) proposals that have been made so far"},PublicProps:{description:"The public proposals. Unsorted. The second item is the proposal's hash"},ReferendumCount:{description:"The next free referendum index, aka the number of referenda started so far"},ReferendumInfoOf:{description:"Information concerning any given referendum"},StorageVersion:{description:"Storage version of the pallet"},VotingOf:{description:"All votes for a particular voter. We store the balance for the number of votes that we have recorded. The second item is the total amount of delegations, that will be added"}},ElectionProviderMultiPhase:{CurrentPhase:{description:"Current phase"},DesiredTargets:{description:"Desired number of targets to elect for this round"},MinimumUntrustedScore:{description:"The minimum score that each 'untrusted' solution must attain in order to be considered feasible"},QueuedSolution:{description:"Current best solution, signed or unsigned, queued to be returned upon `elect`"},Round:{description:"Internal counter for the number of rounds"},SignedSubmissionIndices:{description:"A sorted, bounded set of `(score, index)`, where each `index` points to a value in `SignedSubmissions`"},SignedSubmissionNextIndex:{description:"The next index to be assigned to an incoming signed submission"},SignedSubmissionsMap:{description:"Unchecked, signed solutions"},Snapshot:{description:"Snapshot data of the round"},SnapshotMetadata:{description:"The metadata of the [`RoundSnapshot`]"}},Elections:{Candidates:{description:"The present candidate list. A current member or runner-up can never enter this vector and is always implicitly assumed to be a candidate"},ElectionRounds:{description:"The total number of vote rounds that have happened, excluding the upcoming one"},Members:{description:"The current elected members"},RunnersUp:{description:"The current reserved runners-up"},Voting:{description:"Votes and locked stake of a particular voter"}},Gilt:{Active:{description:"The currently active gilts, indexed according to the order of creation"},ActiveTotal:{description:"Information relating to the gilts currently active"},Queues:{description:"The queues of bids ready to become gilts. Indexed by duration (in `Period`s)"},QueueTotals:{description:"The totals of items and balances within each queue. Saves a lot of storage reads in the case of sparsely packed queues"}},Grandpa:{CurrentSetId:{description:"The number of changes (both in terms of keys and underlying economic responsibilities) in the \"set\" of Grandpa validators from genesis"},NextForced:{description:"next block number where we can force a change"},PendingChange:{description:"Pending change: (signaled at, scheduled change)"},Set:{IdSession:{description:"A mapping from grandpa set ID to the index of the *most recent* session for which its members were responsible"}},Stalled:{description:"`true` if we are currently stalled"},State:{description:"State of the current authority set"}},Identity:{IdentityOf:{description:"Information that is pertinent to identify the entity behind an account"},Registrars:{description:"The set of registrars. Not expected to get very big as can only be added through a special origin (likely a council motion)"},SubsOf:{description:"Alternative \"sub\" identities of this account"},SuperOf:{description:"The super-identity of an alternative \"sub\" identity together with its name, within that context. If the account is not some other account's sub-identity, then just `None`"}},ImOnline:{AuthoredBlocks:{description:"For each session index, we keep a mapping of `ValidatorId<T>` to the number of blocks authored by the given authority"},HeartbeatAfter:{description:"The block number after which it's ok to send heartbeats in the current session"},Keys:{description:"The current set of keys that may issue a heartbeat"},ReceivedHeartbeats:{description:"For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to `WrapperOpaque<BoundedOpaqueNetworkState>`"}},Indices:{Accounts:{description:"The lookup from index to account"}},Lottery:{CallIndices:{description:"The calls stored in this pallet to be used in an active lottery if configured by `Config::ValidateCall`"},Lottery:{description:"The configuration for the current lottery"},Participants:{description:"Users who have purchased a ticket. (Lottery Index, Tickets Purchased)"},Tickets:{description:"Each ticket's owner"},TicketsCount:{description:"Total number of tickets sold"}},Mmr:{Nodes:{description:"Hashes of the nodes in the MMR"},NumberOfLeaves:{description:"Current size of the MMR (number of leaves)"},RootHash:{description:"Latest MMR Root hash"}},Multisig:{Multisigs:{description:"The set of open multisig operations"}},NominationPools:{BondedPools:{description:"Storage for bonded pools"},CounterForBondedPools:{description:"Counter for the related counted storage map"},CounterForMetadata:{description:"Counter for the related counted storage map"},CounterForPoolMembers:{description:"Counter for the related counted storage map"},CounterForReversePoolIdLookup:{description:"Counter for the related counted storage map"},CounterForRewardPools:{description:"Counter for the related counted storage map"},CounterForSubPoolsStorage:{description:"Counter for the related counted storage map"},LastPoolId:{description:"Ever increasing number of all pools created so far"},MaxPoolMembers:{description:"Maximum number of members that can exist in the system. If `None`, then the count members are not bound on a system wide basis"},MaxPoolMembersPerPool:{description:"Maximum number of members that may belong to pool. If `None`, then the count of members is not bound on a per pool basis"},MaxPools:{description:"Maximum number of nomination pools that can exist. If `None`, then an unbounded number of pools can exist"},Metadata:{description:"Metadata for the pool"},MinCreateBond:{description:"Minimum bond required to create a pool"},MinJoinBond:{description:"Minimum amount to bond to join a pool"},PoolMembers:{description:"Active members"},ReversePoolIdLookup:{description:"A reverse lookup from the pool's account id to its id"},RewardPools:{description:"Reward pools. This is where there rewards for each pool accumulate. When a members payout is claimed, the balance comes out fo the reward pool. Keyed by the bonded pools account"},SubPoolsStorage:{description:"Groups of unbonding pools. Each group of unbonding pools belongs to a bonded pool, hence the name sub-pools. Keyed by the bonded pools account"}},Offences:{ConcurrentReportsIndex:{description:"A vector of reports of the same kind that happened at the same time slot"},Reports:{description:"The primary structure that holds all offence records keyed by report identifiers"},ReportsBy:{KindIndex:{description:"Enumerates all reports of a kind along with the time they happened"}}},Preimage:{PreimageFor:{description:"The preimages stored by this pallet"},StatusFor:{description:"The request status of a given hash"}},Proxy:{Announcements:{description:"The announcements made by the proxy (key)"},Proxies:{description:"The set of account proxies. Maps the account which has delegated to the accounts which are being delegated to, together with the amount held on deposit"}},RandomnessCollectiveFlip:{RandomMaterial:{description:"Series of block headers from the last 81 blocks that acts as random seed material. This is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of the oldest hash"}},RankedCollective:{IdToIndex:{description:"The index of each ranks's member into the group of members who have at least that rank"},IndexToId:{description:"The members in the collective by index. All indices in the range `0..MemberCount` will return `Some`, however a member's index is not guaranteed to remain unchanged over time"},MemberCount:{description:"The number of members in the collective who have at least the rank according to the index of the vec"},Members:{description:"The current members of the collective"},Voting:{description:"Votes on a given proposal, if it is ongoing"}},RankedPolls:{DecidingCount:{description:"The number of referenda being decided currently"},ReferendumCount:{description:"The next free referendum index, aka the number of referenda started so far"},ReferendumInfoFor:{description:"Information concerning any given referendum"},TrackQueue:{description:"The sorted list of referenda ready to be decided but not yet being decided, ordered by conviction-weighted approvals"}},Recovery:{ActiveRecoveries:{description:"Active recovery attempts"},Proxy:{description:"The list of allowed proxy accounts"},Recoverable:{description:"The set of recoverable accounts and their recovery configuration"}},Referenda:{DecidingCount:{description:"The number of referenda being decided currently"},ReferendumCount:{description:"The next free referendum index, aka the number of referenda started so far"},ReferendumInfoFor:{description:"Information concerning any given referendum"},TrackQueue:{description:"The sorted list of referenda ready to be decided but not yet being decided, ordered by conviction-weighted approvals"}},Scheduler:{Agenda:{description:"Items to be executed, indexed by the block number that they should be executed on"},Lookup:{description:"Lookup from identity to the block number and index of the task"}},Session:{CurrentIndex:{description:"Current index of the session"},DisabledValidators:{description:"Indices of disabled validators"},KeyOwner:{description:"The owner of a key. The key is the `KeyTypeId` + the encoded key"},NextKeys:{description:"The next session keys for a validator"},QueuedChanged:{description:"True if the underlying economic identities or weighting behind the validators has changed in the queued validator set"},QueuedKeys:{description:"The queued keys for the next session. When the next session begins, these keys will be used to determine the validator's session keys"},Validators:{description:"The current set of validators"}},Society:{Bids:{description:"The current bids, stored ordered by the value of the bid"},Candidates:{description:"The current set of candidates; bidders that are attempting to become members"},Defender:{description:"The defending member currently being challenged"},DefenderVotes:{description:"Votes for the defender"},Founder:{description:"The first member"},Head:{description:"The most primary from the most recently approved members"},MaxMembers:{description:"The max number of members for the society at one time"},Members:{description:"The current set of members, ordered"},Payouts:{description:"Pending payouts; ordered by block number, with the amount that should be paid out"},Pot:{description:"Amount of our account balance that is specifically for the next round's bid(s)"},Rules:{description:"A hash of the rules of this society concerning membership. Can only be set once and only by the founder"},Strikes:{description:"The ongoing number of losing votes cast by the member"},SuspendedCandidates:{description:"The set of suspended candidates"},SuspendedMembers:{description:"The set of suspended members"},Votes:{description:"Double map from Candidate -> Voter -> (Maybe) Vote"},Vouching:{description:"Members currently vouching or banned from vouching again"}},Staking:{ActiveEra:{description:"The active era information, it holds index and start"},Bonded:{description:"Map from all locked \"stash\" accounts to the controller account"},BondedEras:{description:"A mapping from still-bonded eras to the first session index of that era"},CanceledSlashPayout:{description:"The amount of currency given to reporters of a slash event which was canceled by extraordinary circumstances (e.g. governance)"},ChillThreshold:{description:"The threshold for when users can start calling `chill_other` for other validators / nominators. The threshold is compared to the actual number of validators / nominators (`CountFor*`) in the system compared to the configured max (`Max*Count`)"},CounterForNominators:{description:"Counter for the related counted storage map"},CounterForValidators:{description:"Counter for the related counted storage map"},CurrentEra:{description:"The current era index"},CurrentPlannedSession:{description:"The last planned session scheduled by the session pallet"},ErasRewardPoints:{description:"Rewards for the last `HISTORY_DEPTH` eras. If reward hasn't been set or has been removed then 0 reward is returned"},ErasStakers:{description:"Exposure of validator at era"},ErasStakersClipped:{description:"Clipped Exposure of validator at era"},ErasStartSessionIndex:{description:"The session index at which the era start for the last `HISTORY_DEPTH` eras"},ErasTotalStake:{description:"The total amount staked for the last `HISTORY_DEPTH` eras. If total hasn't been set or has been removed then 0 stake is returned"},ErasValidatorPrefs:{description:"Similar to `ErasStakers`, this holds the preferences of validators"},ErasValidatorReward:{description:"The total validator era payout for the last `HISTORY_DEPTH` eras"},ForceEra:{description:"Mode of era forcing"},HistoryDepth:{description:"Number of eras to keep in history"},Invulnerables:{description:"Any validators that may never be slashed or forcibly kicked. It's a Vec since they're easy to initialize and the performance hit is minimal (we expect no more than four invulnerables) and restricted to testnets"},Ledger:{description:"Map from all (unlocked) \"controller\" accounts to the info regarding the staking"},MaxNominatorsCount:{description:"The maximum nominator count before we stop allowing new validators to join"},MaxValidatorsCount:{description:"The maximum validator count before we stop allowing new validators to join"},MinCommission:{description:"The minimum amount of commission that validators can set"},MinimumValidatorCount:{description:"Minimum number of staking participants before emergency conditions are imposed"},MinNominatorBond:{description:"The minimum active bond to become and maintain the role of a nominator"},MinValidatorBond:{description:"The minimum active bond to become and maintain the role of a validator"},Nominators:{description:"The map from nominator stash key to their nomination preferences, namely the validators that they wish to support"},NominatorSlashInEra:{description:"All slashing events on nominators, mapped by era to the highest slash value of the era"},OffendingValidators:{description:"Indices of validators that have offended in the active era and whether they are currently disabled"},Payee:{description:"Where the reward payment should be made. Keyed by stash"},SlashingSpans:{description:"Slashing spans for stash accounts"},SlashRewardFraction:{description:"The percentage of the slash that is distributed to reporters"},SpanSlash:{description:"Records information about the maximum slash of a stash within a slashing span, as well as how much reward has been paid out"},StorageVersion:{description:"True if network has been upgraded to this version. Storage version of the pallet"},UnappliedSlashes:{description:"All unapplied slashes that are queued for later"},ValidatorCount:{description:"The ideal number of staking participants"},Validators:{description:"The map from (wannabe) validator stash key to the preferences of that validator"},ValidatorSlashInEra:{description:"All slashing events on validators, mapped by era to the highest slash proportion and slash value of the era"}},StateTrieMigration:{AutoLimits:{description:"The limits that are imposed on automatic migrations"},MigrationProcess:{description:"Migration progress"},SignedMigrationMaxLimits:{description:"The maximum limits that the signed migration could use"}},Substrate:{ChangesTrieConfig:{description:"Changes trie configuration is stored under this key"},ChildStorageKeyPrefix:{description:"Prefix of child storage keys"},Code:{description:"Wasm code of the runtime"},ExtrinsicIndex:{description:"Current extrinsic index (u32) is stored under this key"},HeapPages:{description:"Number of wasm linear memory pages required for execution of the runtime"}},Sudo:{Key:{description:"The `AccountId` of the sudo key"}},System:{Account:{description:"The full account information for a particular account ID"},AllExtrinsicsLen:{description:"Total length (in bytes) for all extrinsics put together, for the current block"},BlockHash:{description:"Map of block numbers to block hashes"},BlockWeight:{description:"The current weight for the block"},Digest:{description:"Digest of the current block, also part of the block header"},EventCount:{description:"The number of events in the `Events<T>` list"},Events:{description:"Events deposited for the current block"},EventTopics:{description:"Mapping between a topic (represented by T::Hash) and a vector of indexes of events in the `<Events<T>>` list"},ExecutionPhase:{description:"The execution phase of the block"},ExtrinsicCount:{description:"Total extrinsics count for the current block"},ExtrinsicData:{description:"Extrinsics data for the current block (maps an extrinsic's index to its data)"},LastRuntimeUpgrade:{description:"Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened"},Number:{description:"The current block number being processed. Set by `execute_block`"},ParentHash:{description:"Hash of the previous block"},UpgradedToTripleRefCount:{description:"True if we have upgraded so that AccountInfo contains three types of `RefCount`. False (default) if not"},UpgradedToU32RefCount:{description:"True if we have upgraded so that `type RefCount` is `u32`. False (default) if not"}},TechnicalCommittee:{Members:{description:"The current members of the collective. This is stored sorted (just by value)"},Prime:{description:"The prime member that helps determine the default vote behavior in case of absentations"},ProposalCount:{description:"Proposals so far"},ProposalOf:{description:"Actual proposal for a given hash, if it's current"},Proposals:{description:"The hashes of the active proposals"},Voting:{description:"Votes on a given proposal, if it is ongoing"}},TechnicalMembership:{Members:{description:"The current membership, stored as an ordered Vec"},Prime:{description:"The current prime member, if one exists"}},Timestamp:{DidUpdate:{description:"Did the timestamp get updated in this block?"},Now:{description:"Current time for the current block"}},Tips:{Reasons:{description:"Simple preimage lookup from the reason's hash to the original data. Again, has an insecure enumerable hash since the key is guaranteed to be the result of a secure hash"},Tips:{description:"TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value. This has the insecure enumerable hash function since the key itself is already guaranteed to be a secure hash"}},TransactionStorage:{ByteFee:{description:"Storage fee per byte"},ChunkCount:{description:"Count indexed chunks for each block"},EntryFee:{description:"Storage fee per transaction"},ProofChecked:{description:"Was the proof checked in this block?"},StoragePeriod:{description:"Storage period for data in blocks. Should match `sp_storage_proof::DEFAULT_STORAGE_PERIOD` for block authoring"},Transactions:{description:"Collection of transaction metadata by block number"}},Treasury:{Approvals:{description:"Proposal indices that have been approved but not yet awarded"},ProposalCount:{description:"Number of proposals that have been made"},Proposals:{description:"Proposals that have been made"}},Uniques:{Account:{description:"The items held by any given account; set out this way so that items owned by a single account can be enumerated"},Asset:{description:"The items in existence and their ownership details"},Attribute:{description:"Attributes of a collection"},Class:{description:"Details of a collection"},ClassAccount:{description:"The collections owned by any given account; set out this way so that collections owned by a single account can be enumerated"},ClassMetadataOf:{description:"Metadata of a collection"},CollectionMaxSupply:{description:"Keeps track of the number of items a collection might have"},InstanceMetadataOf:{description:"Metadata of an item"},ItemPriceOf:{description:"Price of an asset instance"},NextCollectionId:{description:"Stores the `CollectionId` that is going to be used for the next collection. This gets incremented by 1 whenever a new collection is created"},OwnershipAcceptance:{description:"The collection, if any, of which an account is willing to take ownership"}},Vesting:{StorageVersion:{description:"Storage version of the pallet"},Vesting:{description:"Information regarding the vesting of a given account"}}}}});