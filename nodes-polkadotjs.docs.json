{"Polkadot.js":{"Connection":{"Extension":{"description":"Connect a wallet from browser extension","tags":{"summary":"Connect wallet from browser"},"input":{"ExtensionId":{"description":"Extension's id\n\nIf you're using Polkadot{.js} browser extension\nThe id is `polkadot-js`"},"Connect":{"description":"Request the connection"}},"output":{"Accounts":{"description":"Wallet accounts from browser extension"},"IsAllowed":{"description":"Return true if user was allowed access to browser extension"}}},"HTTP":{"description":"Connect to parachain's RPC through HTTP URL","tags":{"summary":"Web3 RPC Connection"},"input":{"Reconnect":{"description":"Initiate reconnection with the RPC"}},"output":{"Provider":{"description":"RPC Provider object from Polkadot.js's"},"API":{"description":"API object from Polkadot.js's"},"Connected":{"description":"This will be called when we successfully connected to the RPC"},"Disconnected":{"description":"This will be called when we disconnected with the RPC"}}},"WebSocket":{"description":"Connect to parachain's RPC through WebSocket","tags":{"summary":"Web3 RPC Connection"},"input":{"Connect":{"description":"Initiate connection with the RPC"},"Disconnect":{"description":"Disconnect the RPC"}},"output":{"Provider":{"description":"RPC Provider object from Polkadot.js's"},"API":{"description":"API object from Polkadot.js's"},"Connected":{"description":"This will be called when we successfully connected to the RPC"},"Disconnected":{"description":"This will be called when we disconnected with the RPC"}}}},"Convert":{"Mnemonic":{"description":"Convert mnemonic into a secret key","input":{"Text":{"description":"Mnemonic"}},"output":{"Seed":{"description":"Secret key"}}},"Address To":{"Address":{"description":"Convert the wallet address into chain id's address","input":{"Address":{"description":"Wallet/account address in base58 format"},"ChainId":{"description":"Chain id"}},"output":{"Address":{"description":"Wallet/account address in base58 format"}}},"Uint8Array":{"description":"Convert the wallet address (in base58 format) into bytes","input":{"Address":{"description":"Wallet/account address in base58 format"}},"output":{"Bytes":{"description":"Address's bytes"}}}},"String To":{"Uint8Array":{"description":"Convert any string into bytes"}},"Uint8Array To":{"Hex":{"description":"Convert bytes into hex string"},"String":{"description":"Convert bytes into string"}}},"Data":{"Sign":{"description":"Sign a data with wallet's signer (private key)\nThe signed data can then be verified with the signer's wallet address (public key)","tags":{"summary":"Sign a data"},"input":{"Trigger":{"description":"Start the signing process (trigger is required to ask access to browser wallet)"},"Signer":{"description":"Keypair's signer or browser extension's signer"},"Data":{"description":"Any data to be signed"}},"output":{"Bytes":{"description":"Data's signature"}}},"Verify":{"description":"Verify the validation of data with the data's signature","tags":{"summary":"Verify signed data"},"input":{"Address":{"description":"Wallet/account address in base58 format"},"Data":{"description":"Original data"},"Signature":{"description":"Data's signature"}},"output":{"IsValid":{"description":"Return true if the data's signature is valid"}}}},"Events":{"Blocks":{"description":"Listen to new block generated on parachain through WebSocket RPC","tags":{"summary":"Listen for new blocks"},"input":{"API":{"description":"Polkadot.js's WebSocket API"}},"output":{"Data":{"description":"Raw event data"},"Number":{"description":"Block number"}}},"Account":{"Balance":{"description":"Listen to balance changes of an account (wallet) through WebSocket RPC","tags":{"summary":"Listen for balance changes"},"input":{"API":{"description":"Polkadot.js's WebSocket API"},"Address":{"description":"Wallet/account address in base58 format"}},"output":{"DataFree":{"description":"Amount of account balance that transferrable"},"DataReserved":{"description":"Reserved balance"},"DataMiscFrozen":{"description":"Frozen balances"},"DataFeeFrozen":{"description":"Frozen fee"},"Data":{"description":"Raw event data, right click to split the data"}}}}},"Keyring":{"RandomSeed":{"description":"Create a wallet with a random seed\nThis can be useful for testing something","tags":{"summary":"Randomly generated wallet"},"input":{"KeyType":{"description":"This must be one of ed25519, sr25519, ethereum, or ecdsa"}},"output":{"Address":{"description":"Wallet/account address in base58 format"},"Seed":{"description":"Random seed that was being used to generate this random wallet"},"Signer":{"description":"This wallet's signer"},"Pair":{"description":"This wallet's pair key"}}},"Create":{"Keypair":{"description":"Create a keypair and the signer from seed or mnemonic","input":{"Keyring":{"description":"Keypair to store the keyring\nYou can leave this unconnected to use internal keyring"},"Seed":{"description":"Hex string, or 32 bytes Uint8Array"},"Mnemonic":{"description":"12 or 24 words"}},"output":{"Keypair":{"description":"Generated key pair"},"Address":{"description":"Wallet/account address in base58 format"},"Signer":{"description":"This can be used for signing transaction"}}},"Keyring":{"description":"Create a keyring to store keypairs","tags":{"summary":"Collection of keypairs"},"input":{"KeyType":{"description":"This must be one of ed25519, sr25519, ethereum, or ecdsa"}},"output":{"Keyring":{"description":"Polkadot.js's Keyring object"}}},"Mnemonic":{"description":"Create a random mnemonic that can be used for key pair or generating a wallet","tags":{"summary":"Generate random mnemonic"},"output":{"Text":{"description":"Random mnemonic"}}},"Seed":{"description":"Create a random seed that can be used for key pair or generating a wallet","tags":{"summary":"Generate random seed"},"output":{"Seed":{"description":"Random seed"}}}}},"Transaction":{"Batch":{"description":"Combine transactions into one transaction to be executed in batch","tags":{"summary":"Combine multiple transaction"},"input":{"Txn":{"description":"Multiple unsigned transactions"}},"output":{"Txn":{"description":"One unsigned transaction"}}},"PaymentInfo":{"description":"Retrieve a payment info from an signed/unsigned transaction","tags":{"summary":"Get transaction fee"},"input":{"Sender":{"description":"Sender's address"},"Txn":{"description":"Signed/unsigned transaction"}},"output":{"InfoFee":{"description":"Fee that need to be paid for executing the transaction"},"InfoWeight":{"description":"Transaction weight"},"Info":{"description":"Raw status response, right click to split the data"}}},"Send":{"description":"Create an unsigned transaction\nYou may need to sign and send this to the RPC to be executed","tags":{"summary":"Sign and submit transaction"},"input":{"Submit":{"description":"Submit the transaction request into the parachain"},"Signer":{"description":"Can be from extension or generated keypair (with mnemonic/seed)"},"Txn":{"description":"Unsigned transaction that will be submitted"},"Nonce":{"description":"Optional, in case if user want to override the nonce"}},"output":{"Success":{"description":"Callback when the transaction was finalized and success"},"Failed":{"description":"Callback when the transaction was finalized and failed"},"Status":{"description":"Raw status from Polkadot.js"},"TxHash":{"description":"This will have value after Ready status (before Broadcast)"}}}},"Account":{"Transfer":{"Balance":{"description":"Transfer account's balance to another account (account = wallet)\nThe unsigned transaction need to be signed by the sender wallet\nValue must be integer, different parachain may have different decimals","tags":{"summary":"Transfer balance to an address"},"input":{"API":{"description":"Polkadot's API connection"},"Address":{"description":"Target wallet/account address in base58 format"},"Value":{"description":"Amount of transfer (must be positive and lower than 2^53 - 1)"}},"output":{"Txn":{"description":"Unsigned transaction\n\nthis must be signed by the sender before being\nsubmitted to blockchain to be executed"}}}}},"Extension":{"Get":{"Signer":{"description":"Before using this node,\nYou must request for access into browser extension first with\nPolkadot.js/Connection/Extension","tags":{"summary":"Get wallet signer from browser extension"},"input":{"Address":{"description":"Wallet/account address in base58 format"}},"output":{"Signer":{"description":"This can be used for signing transaction"}}}}}}}